"""
Car class implementation demonstrating instance, class, and static methods.
Classes:
    Car: Represents a car with make, model, mpg, and odometer attributes. 
         Includes methods to drive the car, calculate range, update warranty, 
         and compute miles per gallon.
Usage:
    - Create Car instances with make, model, and mpg.
    - Use instance methods to drive the car and calculate range.
    - Use class method to update the warranty for all Car instances.
    - Use static method as a utility to calculate mpg from distance and gallons.
Example:
    car_01.drive(15)
    Car.calc_mpg(300, 10)

****** This docstring was autogenerated in VSCode as the final action taken. ******
"""

# Car Class


class Car:
    warranty = 3

    # Initialize a Car object with:
    #   -make
    #   -model
    #   -mpg
    #   -odometer (default: 0)
    # Called when instantiating an object
    def __init__(self, make, model, mpg):
        self.make = make
        self.model = model
        self.mpg = mpg
        self.odometer = 0

    # Instance method:
    #   - add miles to odometer
    #   - used as [instance].drive(int) to perform calc
    #   - return f-string
    def drive(self, miles):
        self.odometer += miles
        return f"{self.make} {self.model} drove {miles} miles. (total {self.odometer} miles)"

    # Instance method:
    #   - multiple mpg * gallons, getting range
    #   - used as [instance].veh_range(int) to get range
    def veh_range(self, gallons):
        return self.mpg * gallons

    # Class method:
    #   - updates the warranty of the vehicle across all instances
    #   - differs from below Static method because this has class binding
    #   - used as [Class].set_warranty(int) to make the change
    @classmethod
    def set_warranty(cls, years):
        cls.warranty = years

    # Static method:
    #   - checks if gas tank is empty, returns 0 (prevent divide by zero)
    #   - instance is not required, there's no binding
    #   - it's a general mpg tool, not instance specific
    #   - calculates and returns miles per gallon
    #   - used as [Class].calc_mpg(int, int) or [instance].calc_mpg(int, int)
    @staticmethod
    def calc_mpg(distance, gallons):
        if gallons == 0:
            return 0
        return distance / gallons


# ------ Instances ------
car_01 = Car("Honda", "CRV", 27)
car_02 = Car("Toyota", "Corolla", 33)
car_03 = Car("Toyota", "Land Cruiser FJ40", 14)


# ------ Instance Methods ------
print(f"\n{car_01.drive(15)}")
print(f"{car_02.make} range on 3 gal: {car_02.veh_range(3)} miles")


# ------ Class Methods ------
print(f"Default warranty: {Car.warranty}")
Car.set_warranty(5)
print(f"New warranty (class): {Car.warranty}\n")
print(f"[car_01] sees warranty: {car_01.warranty}")
print(f"[car_03] sees warranty: {car_03.warranty}")

trip_mpg = Car.calc_mpg(300, 10)
print(f"Trip MPG (300 miles / 10 gal): {trip_mpg}\n")


"""
Instance methods are methods that are bound to the instance they are derived
from and accessible to all instances/children of that Class.
Class methods are bound to the Class and require the Class when called. These
are accessible to all instances of the Class, self and children.
Static methods are not bound at all, and serve as "utility" tools that do not
require a Class or instance to be called.    
"""
